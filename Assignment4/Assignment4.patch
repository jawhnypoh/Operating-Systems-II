--- first_fit/slob.c	2018-06-06 23:48:39.892540902 -0700
+++ best_fit/slob.c	2018-06-08 23:04:43.047956306 -0700
@@ -87,6 +87,9 @@
 typedef s32 slobidx_t;
 #endif
 
+unsigned long slobPageCount = 0;
+unsigned long freeUnits = 0;
+
 struct slob_block {
 	slobidx_t units;
 };
@@ -217,49 +220,49 @@
 static void *slob_page_alloc(struct page *sp, size_t size, int align)
 {
 	slob_t *prev, *cur, *aligned = NULL;
-	int delta = 0, units = SLOB_UNITS(size);
-
-	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
-		slobidx_t avail = slob_units(cur);
+		int delta = 0, units = SLOB_UNITS(size);
 
-		if (align) {
-			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
-			delta = aligned - cur;
-		}
-		if (avail >= units + delta) { /* room enough? */
-			slob_t *next;
+		for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
+			slobidx_t avail = slob_units(cur);
 
-			if (delta) { /* need to fragment head to align? */
-				next = slob_next(cur);
-				set_slob(aligned, avail - delta, next);
-				set_slob(cur, delta, aligned);
-				prev = cur;
-				cur = aligned;
-				avail = slob_units(cur);
+			if (align) {
+				aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+				delta = aligned - cur;
 			}
+			if (avail >= units + delta) { /* room enough? */
+				slob_t *next;
 
-			next = slob_next(cur);
-			if (avail == units) { /* exact fit? unlink. */
-				if (prev)
-					set_slob(prev, slob_units(prev), next);
-				else
-					sp->freelist = next;
-			} else { /* fragment */
-				if (prev)
-					set_slob(prev, slob_units(prev), cur + units);
-				else
-					sp->freelist = cur + units;
-				set_slob(cur + units, avail - units, next);
-			}
+				if (delta) { /* need to fragment head to align? */
+					next = slob_next(cur);
+					set_slob(aligned, avail - delta, next);
+					set_slob(cur, delta, aligned);
+					prev = cur;
+					cur = aligned;
+					avail = slob_units(cur);
+				}
 
-			sp->units -= units;
-			if (!sp->units)
-				clear_slob_page_free(sp);
-			return cur;
+				next = slob_next(cur);
+				if (avail == units) { /* exact fit? unlink. */
+					if (prev)
+						set_slob(prev, slob_units(prev), next);
+					else
+						sp->freelist = next;
+				} else { /* fragment */
+					if (prev)
+						set_slob(prev, slob_units(prev), cur + units);
+					else
+						sp->freelist = cur + units;
+					set_slob(cur + units, avail - units, next);
+				}
+
+				sp->units -= units;
+				if (!sp->units)
+					clear_slob_page_free(sp);
+				return cur;
+			}
+			if (slob_last(cur))
+				return NULL;
 		}
-		if (slob_last(cur))
-			return NULL;
-	}
 }
 
 /*
@@ -270,8 +273,10 @@
 	struct page *sp;
 	struct list_head *prev;
 	struct list_head *slob_list;
+	struct list_head *temp;
 	slob_t *b = NULL;
 	unsigned long flags;
+	freeUnits = 0;
 
 	if (size < SLOB_BREAK1)
 		slob_list = &free_slob_small;
@@ -309,6 +314,21 @@
 			list_move_tail(slob_list, prev->next);
 		break;
 	}
+
+	// Loop through each linked list to find free space
+	temp = &free_slob_small;
+	list_for_each_entry(sp, temp, lru) {
+		freeUnits += sp->units;
+	}
+	temp = &free_slob_medium;
+	list_for_each_entry(sp, temp, lru) {
+		freeUnits += sp->units;
+	}
+	temp = &free_slob_large;
+	list_for_each_entry(sp, temp, lru) {
+		freeUnits += sp->units;
+	}
+
 	spin_unlock_irqrestore(&slob_lock, flags);
 
 	/* Not enough space: must allocate a new page */
@@ -328,6 +348,9 @@
 		b = slob_page_alloc(sp, size, align);
 		BUG_ON(!b);
 		spin_unlock_irqrestore(&slob_lock, flags);
+
+		// Alocate Page
+		slobPageCount++;
 	}
 	if (unlikely((gfp & __GFP_ZERO) && b))
 		memset(b, 0, size);
@@ -362,6 +385,10 @@
 		__ClearPageSlab(sp);
 		page_mapcount_reset(sp);
 		slob_free_pages(b, 0);
+
+		// Free Page and Decrement
+		slobPageCount--;
+
 		return;
 	}
 
@@ -468,6 +495,7 @@
 }
 EXPORT_SYMBOL(__kmalloc);
 
+#ifdef CONFIG_TRACING
 void *__kmalloc_track_caller(size_t size, gfp_t gfp, unsigned long caller)
 {
 	return __do_kmalloc_node(size, gfp, NUMA_NO_NODE, caller);
@@ -480,6 +508,7 @@
 	return __do_kmalloc_node(size, gfp, node, caller);
 }
 #endif
+#endif
 
 void kfree(const void *block)
 {
